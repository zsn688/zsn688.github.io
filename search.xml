<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机基础---JavaScript</title>
    <url>/2013/07/13/comparison/</url>
    <content><![CDATA[<h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> &gt; <span class="number">1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码比较<code>2</code>是否大于<code>1</code>，返回<code>true</code>。</p>
<blockquote>
<p>注意，比较运算符可以比较各种类型的值，不仅仅是数值。</p>
</blockquote>
<p>JavaScript 一共提供了8个比较运算符。</p>
<ul>
<li><code>&gt;</code> 大于运算符</li>
<li><code>&lt;</code> 小于运算符</li>
<li><code>&lt;=</code> 小于或等于运算符</li>
<li><code>&gt;=</code> 大于或等于运算符</li>
<li><code>==</code> 相等运算符</li>
<li><code>===</code> 严格相等运算符</li>
<li><code>!=</code> 不相等运算符</li>
<li><code>!==</code> 严格不相等运算符</li>
</ul>
<p>这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的，对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；否则，将两个运算子都转成数值，再比较数值的大小。</p>
<h2 id="非相等运算符：字符串的比较"><a href="#非相等运算符：字符串的比较" class="headerlink" title="非相等运算符：字符串的比较"></a>非相等运算符：字符串的比较</h2><p>字符串按照字典顺序进行比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;cat&#x27;</span> &gt; <span class="string">&#x27;dog&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;cat&#x27;</span> &gt; <span class="string">&#x27;catalog&#x27;</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 引擎内部首先比较首字符的 Unicode 码点。如果相等，再比较第二个字符的 Unicode 码点，以此类推。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;cat&#x27;</span> &gt; <span class="string">&#x27;Cat&#x27;</span> <span class="comment">// true&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，小写的<code>c</code>的 Unicode 码点（<code>99</code>）大于大写的<code>C</code>的 Unicode 码点（<code>67</code>），所以返回<code>true</code>。</p>
<p>由于所有字符都有 Unicode 码点，因此汉字也可以比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;大&#x27;</span> &gt; <span class="string">&#x27;小&#x27;</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，“大”的 Unicode 码点是22823，“小”是23567，因此返回<code>false</code>。</p>
<h2 id="非相等运算符：非字符串的比较"><a href="#非相等运算符：非字符串的比较" class="headerlink" title="非相等运算符：非字符串的比较"></a>非相等运算符：非字符串的比较</h2><p>如果两个运算子之中，至少有一个不是字符串，需要分成以下两种情况。</p>
<p><strong>（1）原始类型值</strong></p>
<p>如果两个运算子都是原始类型的值，则是先转成数值再比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> &gt; <span class="string">&#x27;4&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 5 &gt; Number(&#x27;4&#x27;)</span></span><br><span class="line"><span class="comment">// 即 5 &gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> &gt; <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 Number(true) &gt; Number(false)</span></span><br><span class="line"><span class="comment">// 即 1 &gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> &gt; <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 2 &gt; Number(true)</span></span><br><span class="line"><span class="comment">// 即 2 &gt; 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，字符串和布尔值都会先转成数值，再进行比较。</p>
<p>这里需要注意与<code>NaN</code>的比较。任何值（包括<code>NaN</code>本身）与<code>NaN</code>使用非相等运算符进行比较，返回的都是<code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &gt; <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span> &lt;= <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> &gt; <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> &lt;= <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">NaN</span> &gt; <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="title class_">NaN</span> &lt;= <span class="title class_">NaN</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）对象</strong></p>
<p>如果运算子是对象，会转为原始类型的值，再进行比较。</p>
<p>对象转换成原始类型的值，算法是先调用<code>valueOf</code>方法；如果返回的还是对象，再接着调用<code>toString</code>方法，详细解释参见《数据类型的转换》一章。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = [<span class="number">2</span>];</span><br><span class="line">x &gt; <span class="string">&#x27;11&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 [2].valueOf().toString() &gt; &#x27;11&#x27;</span></span><br><span class="line"><span class="comment">// 即 &#x27;2&#x27; &gt; &#x27;11&#x27;</span></span><br><span class="line"></span><br><span class="line">x.<span class="property">valueOf</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span> &#125;;</span><br><span class="line">x &gt; <span class="string">&#x27;11&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 等同于 [2].valueOf() &gt; &#x27;11&#x27;</span></span><br><span class="line"><span class="comment">// 即 &#x27;1&#x27; &gt; &#x27;11&#x27;</span></span><br></pre></td></tr></table></figure>

<p>两个对象之间的比较也是如此。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>] &gt; [<span class="number">1</span>] <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 [2].valueOf().toString() &gt; [1].valueOf().toString()</span></span><br><span class="line"><span class="comment">// 即 &#x27;2&#x27; &gt; &#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>] &gt; [<span class="number">11</span>] <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString()</span></span><br><span class="line"><span class="comment">// 即 &#x27;2&#x27; &gt; &#x27;11&#x27;</span></span><br><span class="line"></span><br><span class="line">&#123; <span class="attr">x</span>: <span class="number">2</span> &#125; &gt;= &#123; <span class="attr">x</span>: <span class="number">1</span> &#125; <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 &#123; x: 2 &#125;.valueOf().toString() &gt;= &#123; x: 1 &#125;.valueOf().toString()</span></span><br><span class="line"><span class="comment">// 即 &#x27;[object Object]&#x27; &gt;= &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="严格相等运算符"><a href="#严格相等运算符" class="headerlink" title="严格相等运算符"></a>严格相等运算符</h2><p>JavaScript 提供两种相等运算符：<code>==</code>和<code>===</code>。</p>
<p>简单说，它们的区别是相等运算符（<code>==</code>）比较两个值是否相等，严格相等运算符（<code>===</code>）比较它们是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回<code>false</code>，而相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较。</p>
<p>本节介绍严格相等运算符的算法。</p>
<p><strong>（1）不同类型的值</strong></p>
<p>如果两个值的类型不同，直接返回<code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="string">&quot;1&quot;</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> === <span class="string">&quot;true&quot;</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面代码比较数值的<code>1</code>与字符串的“1”、布尔值的<code>true</code>与字符串<code>&quot;true&quot;</code>，因为类型不同，结果都是<code>false</code>。</p>
<p><strong>（2）同一类的原始类型值</strong></p>
<p>同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回<code>true</code>，值不同就返回<code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">0x1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码比较十进制的<code>1</code>与十六进制的<code>1</code>，因为类型和值都相同，返回<code>true</code>。</p>
<p>需要注意的是，<code>NaN</code>与任何值都不相等（包括自身）。另外，正<code>0</code>等于负<code>0</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>  <span class="comment">// false</span></span><br><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）复合类型值</strong></p>
<p>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#125; === &#123;&#125; <span class="comment">// false</span></span><br><span class="line">[] === [] <span class="comment">// false</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; === <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面代码分别比较两个空对象、两个空数组、两个空函数，结果都是不相等。原因是对于复合类型的值，严格相等运算比较的是，它们是否引用同一个内存地址，而运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址，结果当然是<code>false</code>。</p>
<p>如果两个变量引用同一个对象，则它们相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> v2 = v1;</span><br><span class="line">v1 === v2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj1 &gt; obj2 <span class="comment">// false</span></span><br><span class="line">obj1 &lt; obj2 <span class="comment">// false</span></span><br><span class="line">obj1 === obj2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面的三个比较，前两个比较的是值，最后一个比较的是地址，所以都返回<code>false</code>。</p>
<p><strong>（4）undefined 和 null</strong></p>
<p><code>undefined</code>和<code>null</code>与自身严格相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>由于变量声明后默认值是<code>undefined</code>，因此两个只声明未赋值的变量是相等的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v1;</span><br><span class="line"><span class="keyword">var</span> v2;</span><br><span class="line">v1 === v2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="严格不相等运算符"><a href="#严格不相等运算符" class="headerlink" title="严格不相等运算符"></a>严格不相等运算符</h2><p>严格相等运算符有一个对应的“严格不相等运算符”（<code>!==</code>），它的算法就是先求严格相等运算符的结果，然后返回相反值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> !== <span class="string">&#x27;1&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">!(<span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上面代码中，感叹号<code>!</code>是求出后面表达式的相反值。</p>
<h2 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h2><p>相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1.0</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="number">1</span> === <span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<p>比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。下面分成几种情况，讨论不同类型的值互相比较的规则。</p>
<p><strong>（1）原始类型值</strong></p>
<p>原始类型的值会转换成数值再进行比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 1 === Number(true)</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 0 === Number(false)</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> == <span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 等同于 2 === Number(true)</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> == <span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 等同于 2 === Number(false)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;true&#x27;</span> == <span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 等同于 Number(&#x27;true&#x27;) === Number(true)</span></span><br><span class="line"><span class="comment">// 等同于 NaN === 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 Number(&#x27;&#x27;) === 0</span></span><br><span class="line"><span class="comment">// 等同于 0 === 0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="literal">false</span>  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 Number(&#x27;&#x27;) === Number(false)</span></span><br><span class="line"><span class="comment">// 等同于 0 === 0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> == <span class="literal">true</span>  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 等同于 Number(&#x27;1&#x27;) === Number(true)</span></span><br><span class="line"><span class="comment">// 等同于 1 === 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;\n  123  \t&#x27;</span> == <span class="number">123</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 因为字符串转为数字时，省略前置和后置的空格</span></span><br></pre></td></tr></table></figure>

<p>上面代码将字符串和布尔值都转为数值，然后再进行比较。具体的字符串与布尔值的类型转换规则，参见《数据类型转换》一章。</p>
<p><strong>（2）对象与原始类型值比较</strong></p>
<p>对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。</p>
<p>具体来说，先调用对象的<code>valueOf()</code>方法，如果得到原始类型的值，就按照上一小节的规则，互相比较；如果得到的还是对象，则再调用<code>toString()</code>方法，得到字符串形式，再进行比较。</p>
<p>下面是数组与原始类型值比较的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组与数值的比较</span></span><br><span class="line">[<span class="number">1</span>] == <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组与字符串的比较</span></span><br><span class="line">[<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span> <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] == <span class="string">&#x27;1,2&#x27;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象与布尔值的比较</span></span><br><span class="line">[<span class="number">1</span>] == <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line">[<span class="number">2</span>] == <span class="literal">true</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面例子中，JavaScript 引擎会先对数组<code>[1]</code>调用数组的<code>valueOf()</code>方法，由于返回的还是一个数组，所以会接着调用数组的<code>toString()</code>方法，得到字符串形式，再按照上一小节的规则进行比较。</p>
<p>下面是一个更直接的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行 valueOf()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">toString</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行 toString()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj == <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="comment">// 执行 valueOf()</span></span><br><span class="line"><span class="comment">// 执行 toString()</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面例子中，<code>obj</code>是一个自定义了<code>valueOf()</code>和<code>toString()</code>方法的对象。这个对象与字符串<code>&#39;foo&#39;</code>进行比较时，会依次调用<code>valueOf()</code>和<code>toString()</code>方法，最后返回<code>&#39;foo&#39;</code>，所以比较结果是<code>true</code>。</p>
<p><strong>（3）undefined 和 null</strong></p>
<p><code>undefined</code>和<code>null</code>只有与自身比较，或者互相比较时，才会返回<code>true</code>；与其他类型的值比较时，结果都为<code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="literal">null</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>（4）相等运算符的缺点</strong></p>
<p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span>             <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;0&#x27;</span>            <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> == <span class="literal">true</span>           <span class="comment">// false</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">false</span>          <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span>    <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span>        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>  <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>       <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; \t\r\n &#x27;</span> == <span class="number">0</span>     <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面这些表达式都不同于直觉，很容易出错。因此建议不要使用相等运算符（<code>==</code>），最好只使用严格相等运算符（<code>===</code>）。</p>
<h2 id="不相等运算符"><a href="#不相等运算符" class="headerlink" title="不相等运算符"></a>不相等运算符</h2><p>相等运算符有一个对应的“不相等运算符”（<code>!=</code>），它的算法就是先求相等运算符的结果，然后返回相反值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> != <span class="string">&#x27;1&#x27;</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">!(<span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>PS3</tag>
        <tag>Games</tag>
      </tags>
  </entry>
</search>
